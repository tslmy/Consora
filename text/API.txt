
Consora API Documentation v0.1
==============================
Tags
----
Open-source, JavaScript, HTML5, jQuery, AJAX, console, minimalist, web-based, web-based OS, tslmy-production, lightweight.


Foreword
--------
This is the official documentation for developers to easily __integrate their stand-alone Javascript__(jQuery included) __applications to a__ lightweight __web-based console__ UI system, Consora.  
Enjoy.


Glossary 
--------
(I know it's ought to be at the end.)
###Consora
A open-source, jQuery-based, Webkit-oriented[^1], lightweight, minimalistic console platform & UI system served in a web page.

[^1]: Mostly. I didn't write any code specially for other engines, since I don't want to protract my coding time to school:P

###Consorapps
Applications on Consora, which can be executed in the Consora console using a saperate command.

For developers, these are JavaScript functions that executed when user gives a command.  
Notice that it doesn't have to be all the functions you write! This means, you can have a user-unknown function with a fancy name, designed just for another function to call.

###package
A package is a JavaScript file containing a set of Consorapps that are of the same category.

For example, a package may contain Consorapps that calculates `sin()`, `cos()` and `tan()`, while another provides JS-based games.

It's normally stored under "`program`" folder, named like "`pack_XXX.js`", and can be installed by Consora users via a "`ins XXX`" command.

###Tslmy
[Me](http://tslmy.tk), the author.


Context
--------
Don't be bored, this is easy. I just feel like writing a lot XD.



###What on earth is Consora?
I would like just refer to the _Glossary_.



###How to build my own Consora?

####How can I acquire my own copy of Consora system?
To set up your own Consora, Just head to <https://github.com/tslmy/Consora> and grab a newest [ZIP][] pack.  
[ZIP]: https://github.com/tslmy/Consora/zipball/master

####Then?
0. Unzip it -- if you've downloaded the ZIP pack rather than pulled it via git.
1. Edit them as you like.
2. Upload, or just double-click the _index.htm_ to have a test drive.  
   _P.S.__ajax__ only available on server._



###How to make my own code cooperate with Consora?

1.  In your main(yes, you can have multiple ones) `.js` file, rename all the functions __that's intended for user to call via console command__ into something like:

        programs.push('AAAA');function program_AAAA(){

     , where `AAAA`(__all lowercase!!__) is the intended command, like `AAAA para1 para2`.  
     Afterwards, `function program_AAAA()` is called your Consorapp.

2.  Your Consorapp should take __NO__ parameters. A few global varibles are given for parsing the needed parameters out from user input:
    *   `command_name`: stores your command's name. In the previous example, `"AAAA"`.
    *   `command_para`: stores a string of parameters. e.g. `"para1 para2"`.
    *   `command_para_set`: stores a set of parameters. e.g. `["para1", "para2"]`.
    *   `process_result`: the value returned by last executed command. Normally, `0`.



###Now that I've prepared my code, how can I add it into my own Consora?

Two ways can lead your work to your user:

####Load-When-Asked Way
If you would like your user get a simple Consora platform first, and then load packages when user says `ins`(tall), you can just do these steps repeatedly to all your packages:

2.  Put your JS file under `/program/` folder.
3.  Rename it like `pack_XXXX.js`, where `XXXX` is a short name you like. This file is called your _package_ from now on.
4.  Edit `/system.js`. At `program_packs=` line, add your own package's information to it (see the example below), so that your visitors could find your treasure.  
For example: if your package's short name is `XXXX`, and the commands you want your visitors to be able to execute are `AAAA`, `BBBB` and `CCCC`, you edit this line to:

        program_packs=[['info',',me,'],['XXXX',',AAAA,BBBB,CCCC,']];
  
####Initial Way
Some specific function is required by your user at most of the occasions, so it's better to make them available at the same time the console is loaded.

1.  Insert your prepared codes to `basic_program.js`.
2.  Rename the Consorapps as told in the previous way. 
  
###I got a idea/I just improved it a little, how can I contribute my effort to Consora project?
I am always glad to make friends, so do contact me!  
If you have ideas for __improving Consora__ main system itself, please use [GitHub](https://github.com/tslmy/Consora) and fork your own copy. You know how to play it.  
If you feel like chatting with me myself, there're several ways to get in touch with me:

*  Twitter: <https://twitter.com/tslmy>
*  E-mail:  <tslimingyang@126.com>
*  Home Page: <http://tslmy.tk>
*  QQ:  466548897
*  _I don't own a phone._
*  Yell to the sky: "__Tslmy__!!!"

Appendix
-------
###Extra Links
<http://www.tslmy.tk>  
My website. You can check out my newest project here. Experimental site:<http://lrin.tk>.

<https://github.com/tslmy/Consora>  
Where the Consora project is hosted.

<http://c.lrin.tk>  
The official Consora demo.
<http://tslmy.users.sf.net/c/> and <http://tslmy.tk/c> are backups.

<http://lab.jack-1a23.tk>  
An instance of Consora to check out.

<http://my.hwlyz.com>  
Another web-based OS, engineering by my grade mate.



Tslmy, 2012.1.12.